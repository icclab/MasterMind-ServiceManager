# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
# from swagger_server import util
import util

class Volume(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, engine_url: str=None, ca_cert: str=None, cert: str=None, cert_key: str=None, name: str=None):  # noqa: E501
        """Volume - a model defined in Swagger

        :param engine_url: The engine_url of this Volume.  # noqa: E501
        :type engine_url: str
        :param ca_cert: The ca_cert of this Volume.  # noqa: E501
        :type ca_cert: str
        :param cert: The cert of this Volume.  # noqa: E501
        :type cert: str
        :param cert_key: The cert_key of this Volume.  # noqa: E501
        :type cert_key: str
        :param name: The name of this Volume.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'engine_url': str,
            'ca_cert': str,
            'cert': str,
            'cert_key': str,
            'name': str
        }

        self.attribute_map = {
            'engine_url': 'engine-url',
            'ca_cert': 'ca-cert',
            'cert': 'cert',
            'cert_key': 'cert-key',
            'name': 'name'
        }

        self._engine_url = engine_url
        self._ca_cert = ca_cert
        self._cert = cert
        self._cert_key = cert_key
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volume of this Volume.  # noqa: E501
        :rtype: Volume
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine_url(self) -> str:
        """Gets the engine_url of this Volume.


        :return: The engine_url of this Volume.
        :rtype: str
        """
        return self._engine_url

    @engine_url.setter
    def engine_url(self, engine_url: str):
        """Sets the engine_url of this Volume.


        :param engine_url: The engine_url of this Volume.
        :type engine_url: str
        """
        if engine_url is None:
            raise ValueError("Invalid value for `engine_url`, must not be `None`")  # noqa: E501

        self._engine_url = engine_url

    @property
    def ca_cert(self) -> str:
        """Gets the ca_cert of this Volume.


        :return: The ca_cert of this Volume.
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert: str):
        """Sets the ca_cert of this Volume.


        :param ca_cert: The ca_cert of this Volume.
        :type ca_cert: str
        """

        self._ca_cert = ca_cert

    @property
    def cert(self) -> str:
        """Gets the cert of this Volume.


        :return: The cert of this Volume.
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert: str):
        """Sets the cert of this Volume.


        :param cert: The cert of this Volume.
        :type cert: str
        """

        self._cert = cert

    @property
    def cert_key(self) -> str:
        """Gets the cert_key of this Volume.


        :return: The cert_key of this Volume.
        :rtype: str
        """
        return self._cert_key

    @cert_key.setter
    def cert_key(self, cert_key: str):
        """Sets the cert_key of this Volume.


        :param cert_key: The cert_key of this Volume.
        :type cert_key: str
        """

        self._cert_key = cert_key

    @property
    def name(self) -> str:
        """Gets the name of this Volume.


        :return: The name of this Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Volume.


        :param name: The name of this Volume.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
