---
swagger: "2.0"
info:
  description: ""
  version: "2.0.0"
  title: "MasterMind Service Manager"
  contact:
    email: "murp@zhaw.ch"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:8080"
basePath: "/v2"
schemes:
  - "http"
paths:

  /swarm:
    get:
      tags:
        - "Swarm"
      summary: "Get list of known swarms"
      description: "Get list of known swarms"
      operationId: "list_swarms"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Swarm"
      x-swagger-router-controller: "api.controllers.swarm_controller"
    post:
      tags:
        - "Swarm"
      summary: "Create new swarm record"
      description: "Create new swarm record"
      operationId: "create_swarm"
      parameters:
        - in: "body"
          name: "swarm"
          description: "Definition of Swarm to be created"
          required: true
          schema:
            $ref: "#/definitions/Swarm"

      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Swarm"
      x-swagger-router-controller: "api.controllers.swarm_controller"

  /swarm/{swarmid}:
    get:
      tags:
        - "Swarm"
      summary: "Get specfic swarm record"
      description: "Get specfic swarm record"
      operationId: "get_swarm_record"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "ID of swarm to be retrieved"
          required: true
          type: "integer"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Swarm"
      x-swagger-router-controller: "api.controllers.swarm_controller"
    delete:
      tags:
        - "Swarm"
      summary: "Delete specific swarm record"
      description: "Delete specific swarm record"
      operationId: "delete_swarm_record"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "ID of swarm to be deleted"
          required: true
          type: "integer"
      produces:
        - "application/json"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Swarm"
      x-swagger-router-controller: "api.controllers.swarm_controller"

  /swarm/{swarmid}/stack:
    post:
      tags:
        - "Stack"
      summary: "Deploy a new stack"
      description: "Deploy a new stack"
      operationId: "deploy_stack"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "ID of swarm to which stack should be deployed"
          required: true
          type: "integer"
        - in: "body"
          name: "stack"
          description: "Object describing stack to be created"
          required: true
          schema:
            $ref: "#/definitions/Stack"
      responses:
        201:
          description: "OK"
      x-tags:
        - tag: "Stack"
      x-swagger-router-controller: "api.controllers.stack_controller"
    get:
      tags:
        - "Stack"
      summary: "Get list of stacks deployed on given swarm"
      description: "Get list of stacks deployed on given swarm"
      operationId: "get_stacks"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "ID of swarm to which stack should be deployed"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Stack"
      x-swagger-router-controller: "api.controllers.stack_controller"

  /swarm/{swarmid}/stack/{stackid}:
    get:
      tags:
        - "Stack"
      summary: "Get details pertaining to a stack including the status and the list of services of a stack"
      description: "Get details pertaining to a stack including the status and the list of services of a stack"
      operationId: "get_stack"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "ID of swarm to where stack is deployed"
          required: true
          type: "integer"
        - in: "path"
          name: "stackid"
          description: "ID of stack for which details are to be obtained"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully retrieved services"
      x-tags:
        - tag: "Stack"
      x-swagger-router-controller: "api.controllers.stack_controller"
    delete:
      tags:
        - "Stack"
      summary: "Delete all info relating to a given stack and remove it from the swarm"
      description: "Delete all info relating to a given stack and remove it from the swarm"
      operationId: "delete_stack"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "ID of swarm to where stack is deployed"
          required: true
          type: "integer"
        - in: "path"
          name: "stackid"
          description: "ID of stack for which details are to be obtained"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successfully retrieved services"
      x-tags:
        - tag: "Stack"
      x-swagger-router-controller: "api.controllers.stack_controller"

  /swarm/{swarmid}/network:
    get:
      tags:
        - "Network"
      summary: "Obtain a list of defined networks for a given swarm"
      description: "Obtain a list of defined networks for a given swarm"
      operationId: "get_networks"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "Swarm which is being queried for networks"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Network"
      x-swagger-router-controller: "api.controllers.network_controller"
    post:
      tags:
        - "Network"
      summary: "Create a network with the given name on a specific swarm"
      description: "Create a network with the given name on a specific swarm"
      operationId: "create_network"
      produces:
        - "application/json"
      parameters:
        - name: "swarmid"
          in: "path"
          description: "Swarm on which network will be created"
          required: true
          type: "integer"
        - name: "network"
          in: "body"
          description: "Definition of network to be created"
          required: true
          schema:
            $ref: "#/definitions/Network"
      responses:
        201:
          description: "OK"
      x-tags:
        - tag: "Network"
      x-swagger-router-controller: "api.controllers.network_controller"

  /swarm/{swarmid}/network/{networkid}:
    get:
      tags:
        - "Network"
      summary: "Get info pertaining to specified network on specified swarm"
      description: "Get info pertaining to specified network on specified swarm"
      operationId: "get_network"
      produces:
        - "application/json"
      parameters:
        - name: "swarmid"
          in: "path"
          description: "Swarm on which network is defined"
          required: true
          type: "integer"
        - name: "networkid"
          in: "path"
          description: "ID of network for which details will be obtained"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Network"
      x-swagger-router-controller: "api.controllers.network_controller"
    delete:
      tags:
        - "Network"
      summary: "Remove network with given name on given swarm"
      description: "Remove network with given name on given swarm"
      operationId: "delete_network"
      produces:
        - "application/json"
      parameters:
        - name: "swarmid"
          in: "path"
          description: "Swarm on which network will be deleted"
          required: true
          type: "integer"
        - name: "networkid"
          in: "path"
          description: "Network to be removed"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Network"
      x-swagger-router-controller: "api.controllers.network_controller"

  # since we have to provide the credentials with the call, this needs to be
  # a POST - a GET request with a body proves a little troublesome.
  # /get_networks:
  #   post:
  #     tags:
  #       - "Network"
  #     summary: "Get a list of networks from a swarm"
  #     description: ""
  #     operationId: "get_networks_alternative"
  #     produces:
  #       - "application/json"
  #     parameters:
  #       - name: "swarm"
  #         in: "body"
  #         description: "Swarm whcih we are querying for networks"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/Swarm"
      #         - name: "network"
      #           in: "body"
      #           description: "Network to be removed"
      #           required: true
      #           schema:
      #             $ref: "#/definitions/Network"
      # responses:
      #   200:
      #     description: "OK"
      # x-tags:
      #   - tag: "Network"
      # x-swagger-router-controller: "api.controllers.network_controller"

  # since we have to provide the credentials with the call, this needs to be
  # a POST - a GET request with a body proves a little troublesome.
  # /create_network:
  #   post:
  #     tags:
  #       - "Network"
  #     summary: "Create a network with a given name"
  #     description: ""
  #     operationId: "create_network_alternative"
  #     produces:
  #       - "application/json"
  #     parameters:
  #       # - name: "swarm"
  #       #   in: "body"
  #       #   description: "Swarm on which network will be created"
  #       #   required: true
  #       #   schema:
  #       #     $ref: "#/definitions/Swarm"
  #       - name: "network"
  #         in: "body"
  #         description: "Network to be created"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/Network"
  #     responses:
  #       200:
  #         description: "OK"
  #     x-tags:
  #       - tag: "Network"
  #     x-swagger-router-controller: "api.controllers.network_controller"

  /swarm/{swarmid}/volume:
    get:
      tags:
        - "Volume"
      summary: "Obtain a list of volumes on the swarm"
      description: "Obtain a list of volumes on the swarm"
      operationId: "get_volumes"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "Swarm which is being queried for volumes"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Volume"
      x-swagger-router-controller: "api.controllers.volume_controller"
    post:
      tags:
        - "Volume"
      summary: "Create a volume with the given name on the given swarm"
      description: "Create a volume with the given name on the given swarm"
      operationId: "create_volume"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "Swarm on which volume will be created"
          required: true
          type: "integer"
        - name: "volume"
          in: "body"
          description: "Definition of volume to be created"
          required: true
          schema:
            $ref: "#/definitions/Volume"
      responses:
        201:
          description: "OK"
      x-tags:
        - tag: "Volume"
      x-swagger-router-controller: "api.controllers.volume_controller"

  /swarm/{swarmid}/volume/{volumeid}:
    delete:
      tags:
        - "Volume"
      summary: "Remove volume with given name from given swarm"
      description: "Remove volume with given name from given swarm"
      operationId: "delete_volume"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "Swarm on which volume will be created"
          required: true
          type: "integer"
        - name: "volumeid"
          in: "path"
          description: "Volume to be removed"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Volume"
      x-swagger-router-controller: "api.controllers.volume_controller"
    get:
      tags:
        - "Volume"
      summary: "Get details relating to specific volume on specific swarm"
      description: "Get details relating to specific volume on specific swarm"
      operationId: "get_volume"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "swarmid"
          description: "Swarm on which volume will be created"
          required: true
          type: "integer"
        - name: "volumeid"
          in: "path"
          description: "Volume to be removed"
          required: true
          type: "integer"
      responses:
        200:
          description: "OK"
      x-tags:
        - tag: "Volume"
      x-swagger-router-controller: "api.controllers.volume_controller"

  # since we have to provide the credentials with the call, this needs to be
  # a POST - a GET request with a body proves a little troublesome.
  # /get_volumes:
  #   post:
  #     tags:
  #       - "Volume"
  #     summary: "Get a list of volumes from a swarm"
  #     description: ""
  #     operationId: "get_volumes_alternative"
  #     produces:
  #       - "application/json"
  #     parameters:
  #       - name: "swarm"
  #         in: "body"
  #         description: "Swarm which we are querying for volumes"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/Swarm"
  #     #         - name: "network"
  #     #           in: "body"
  #     #           description: "Network to be removed"
  #     #           required: true
  #     #           schema:
  #     #             $ref: "#/definitions/Network"
  #     responses:
  #       200:
  #         description: "OK"
  #     x-tags:
  #       - tag: "Volume"
  #     x-swagger-router-controller: "api.controllers.volume_controller"

  # # since we have to provide the credentials with the call, this needs to be
  # # a POST - a GET request with a body proves a little troublesome.
  # /create_volume:
  #   post:
  #     tags:
  #       - "Volume"
  #     summary: "Create a volume with a given name"
  #     description: ""
  #     operationId: "create_volume_alternative"
  #     produces:
  #       - "application/json"
  #     parameters:
  #       # - name: "swarm"
  #       #   in: "body"
  #       #   description: "Swarm on which network will be created"
  #       #   required: true
  #       #   schema:
  #       #     $ref: "#/definitions/Swarm"
  #       - name: "volume"
  #         in: "body"
  #         description: "Volume to be created"
  #         required: true
  #         schema:
  #           $ref: "#/definitions/Volume"
  #     responses:
  #       200:
  #         description: "OK"
  #     x-tags:
  #       - tag: "Volume"
  #     x-swagger-router-controller: "api.controllers.volume_controller"

definitions:
  Stack:
    type: "object"
    required:
      - "engine-url"
      - "name"
    properties:
      name:
        type: "string"
      compose-file:
        type: "string"
      compose-vars:
        type: "string"
      external_files:
        type: "array"
        items:
          type: "object"
          properties: {}

  Swarm:
    type: "object"
    required:
      - "engine-url"
    properties:
      engine-url:
        type: "string"
      ca-cert:
        type: "string"
      cert:
        type: "string"
      cert-key:
        type: "string"
      name:
        type: "string"

  Network:
    type: "object"
    required:
      - "name"
      - "swarmid"
    properties:
      swarmid:
        type: "integer"
      name:
        type: "string"

  Volume:
    type: "object"
    required:
      - "name"
      - "swarmid"
    properties:
      swarmid:
        type: "integer"
      name:
        type: "string"
        
